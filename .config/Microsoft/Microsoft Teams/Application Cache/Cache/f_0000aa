webpackJsonp([66],{2741:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i(2742)},2742:function(e,t,i){"use strict";var l=this&&this.__extends||function(){var e=function(t,i){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(t,i)};return function(t,i){function l(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(l.prototype=i.prototype,new l)}}();Object.defineProperty(t,"__esModule",{value:!0});var n,a=teamspace.services,o=a.CallUtilities,c=teams.calling.HidState;!function(e){e[e.Failed=1]="Failed",e[e.RemoteEnded=2]="RemoteEnded",e[e.Unanswered=3]="Unanswered",e[e.AnsweredElsewhere=4]="AnsweredElsewhere",e[e.DeclinedElsewhere=5]="DeclinedElsewhere"}(n||(n={}));var s;!function(e){e[e.Accept=0]="Accept",e[e.Reject=1]="Reject"}(s||(s={}));var r;!function(e){e[e.Mute=0]="Mute",e[e.Unmute=1]="Unmute",e[e.Hold=2]="Hold",e[e.Resume=3]="Resume",e[e.Leave=4]="Leave"}(r||(r={}));var h;!function(e){e[e.NoReason=0]="NoReason",e[e.LeaveCallDisabled=1]="LeaveCallDisabled",e[e.EarlyLeaveCallDisabled=2]="EarlyLeaveCallDisabled"}(h||(h={}));var d={StartCallEvent:"StartCallEvent",AnswerCallActionEvent:"AnswerCallActionEvent",RejectCallActionEvent:"RejectCallActionEvent",EndCallActionEvent:"EndCallActionEvent",HoldCallActionEvent:"HoldCallActionEvent",MuteCallActionEvent:"MuteCallActionEvent",MergeCallsActionEvent:"MergeCallsActionEvent",CallKitErrorEvent:"CallKitErrorEvent",CallKitSuccessEvent:"CallKitSuccessEvent",onLogLine:"onLogLine",initialize:"initialize",selectedMicDidChange:"selectedMicDidChange",reportIncomingCall:"reportIncomingCall",reportOutgoingCallConnecting:"reportOutgoingCallConnecting",reportOutgoingCallConnected:"reportOutgoingCallConnected",reportCallEnded:"reportCallEnded",reportCallAccepted:"reportCallAccepted",requestStartCall:"requestStartCall",requestEndCall:"requestEndCall",reportHoldCall:"reportHoldCall",reportMuteStateChange:"reportMuteStateChange",reportResumeCall:"reportResumeCall",isCallKitCall:"isCallKitCall",availableOnPlatform:"availableOnPlatform",requestHideSystemNotification:"requestHideSystemNotification",completeAction:"completeAction",setConfig:"setConfig",readyForEvents:"readyForEvents",cleanup:"cleanup"},g=function(e){function t(t,i,l,n,a,o,c,s,r,h,d,g,v,p,C,u,f,S){var m=e.call(this,u)||this;return m.$window=t,m.$timeout=i,m.$q=l,m.constants=n,m.callingService=a,m.callingUserActionService=o,m.deviceManagerService=c,m.peopleService=s,m.platformDetectService=r,m.callingAgentsService=h,m.loggingService=d,m.settingsService=g,m.utilityService=v,m.eventingService=p,m.callParkService=C,m.sxConfig=f,m.callingSupportService=S,m.deviceTimeout=1e3,m.callConnectTime=void 0,m.serviceInitialized=!1,m.isSelectedMicHfpBT=!1,m.callsSubscriptions=new Map,m.logger=d.newLogger("CallControlService"),m.initializeOnAppLaunchAndReinit(),m}return l(t,e),t.$inject=["$window","$timeout","$q","constants","callingService","callingUserActionService","deviceManagerService","peopleService","platformDetectService","callingAgentsService","loggingService","settingsService","utilityService","eventingService","callParkService","orchestrationService","sxConfig","callingSupportService"],t.prototype.mtmaTelemetryIdentifier=function(){return"CallControlService"},t.prototype.cleanupOnAppTeardown=function(e){this.destroy(),this.enableHfpBTCallControls=void 0,this.enableHfpBTCallControlsWin11=void 0,this.enableHfpBTCallControlsMac=void 0,this.cutOffWin10Version=void 0,this.currentOSVersion=void 0,this.isDesktopApp=void 0,this.selectedMicrophone=void 0,this.appState=void 0,this.callConnectTime=void 0,this.isSelectedMicHfpBT=!1,this.activeCall=void 0,this.incomingCall=void 0,this.connectingCall=void 0,this.enableMultipleHfpBTDeviceCallControls=void 0,this.enableCallCtrlSupportForNonSelectedBTDevice=void 0,this.enableFlashSupportInHfpBTDevices=void 0,this.callingEventSubscriptions=void 0,this.callsSubscriptions=new Map,this.disableFlashInMultiplePSTNCalls=void 0,this.fakeMoHCall=void 0,this.lastDeviceTriggeredLeaveCall=void 0,this.callHeldByDeviceFlashDuringMultipleCalls=void 0,this.connectedIncomingCall=void 0,this.deviceChangedSubscription=void 0,this.serviceInitialized=!1,this.callControlManagerSettings=void 0},t.prototype.destroy=function(){var e=this;this.callsSubscriptions.size&&(this.callsSubscriptions.forEach(function(t,i){return e.disposeSubscriptionsForCall(i,t)}),this.callsSubscriptions.clear()),this.callingEventSubscriptions&&this.callingEventSubscriptions.forEach(function(e){return e()}),this.deviceChangedSubscription&&teamspace.services.MTMASubscriptionUtility.unsubscribe(this.deviceManagerService,this.deviceChangedSubscription),this.selectedMicrophone=null,this.activeCall=null,this.connectingCall=null,this.incomingCall=null},t.prototype.disposeSubscriptionsForCall=function(e,t){var i=t||this.callsSubscriptions.get(e);i&&i.dispose()},t.prototype.disposeCallSubscriptions=function(e){var t=e&&e.teamsCallId;t&&this.callsSubscriptions.has(t)&&(this.disposeSubscriptionsForCall(t),this.callsSubscriptions.delete(t))},t.prototype.init=function(){},t.prototype.initializeOnAppLaunchAndReinit=function(e){var t=this;this.callControlManagerSettings=this.settingsService.valueFor(this.constants.settings.names.callControlManagerSettings),this.enableHfpBTCallControls=this.callControlManagerSettings.enableHfpBTCallControls,this.enableHfpBTCallControlsWin11=this.callControlManagerSettings.enableHfpBTCallControlsWin11,this.cutOffWin10Version=this.callControlManagerSettings.cutOffWin10Version,this.enableMultipleHfpBTDeviceCallControls=this.callControlManagerSettings.enableMultipleHfpBTDeviceCallControls,this.enableCallCtrlSupportForNonSelectedBTDevice=this.callControlManagerSettings.enableCallCtrlSupportForNonSelectedBTDevice,this.isDesktopApp=this.settingsService.valueAsBoolean(this.constants.settings.names.isDesktopApp),this.enableFlashSupportInHfpBTDevices=this.callControlManagerSettings.enableFlashSupportInHfpBTDevices;var i=this.platformDetectService.getOS();this.currentOSVersion=this.utilityService.getOSVersion();var l=this.platformDetectService.getOSVersion(),n=this.platformDetectService.getDesktopOsArchitecture();if(this.enableHfpBTCallControlsMac=this.callControlManagerSettings.enableHfpBTCallControlsMac,!this.isDesktopApp)return this.logger.info("[init]: call controls are not available outside desktop app"),void(this.serviceInitialized=!1);if(!this.$window||!this.$window.electronSafeIpc)return this.logger.error("Electron IPC not available"),void(this.serviceInitialized=!1);if(this.initializeMainIpc(),!("x64"===n&&(this.enableHfpBTCallControls&&i===this.constants.os.windows&&"10"===l&&this.currentOSVersion<=this.cutOffWin10Version||this.enableHfpBTCallControlsWin11&&i===this.constants.os.windows&&this.currentOSVersion>this.cutOffWin10Version||this.enableHfpBTCallControlsMac&&i===this.constants.os.mac)))return this.logger.info("platform not supported"),void(this.serviceInitialized=!1);this.onDeviceChanged(),this.deviceChangedSubscription=teamspace.services.MTMASubscriptionUtility.subscribe(this.deviceManagerService,function(){return t.onDeviceChanged()},this.constants.events.calling.devicesChanged);try{this.setupCallingEventsListeners()}catch(e){this.serviceInitialized=!1,this.destroy()}this.serviceInitialized=!0,this.serviceInitialized&&this.logger.info("Call Control Service Initialization successful"),this.appState=c.create()},t.prototype.isCallControlServiceAvailable=function(){return this.serviceInitialized},t.prototype.initializeMainIpc=function(){var e=this,t=this.$window.electronSafeIpc;teamspace.services.MTMAIpcUtility.onWithTenantScope(t,d.StartCallEvent,function(t,i){return e.onStartCallEvent(i)}),teamspace.services.MTMAIpcUtility.onWithTenantScope(t,d.AnswerCallActionEvent,function(t,i){return e.onAnswerCallActionEvent(i.callId,i)}),teamspace.services.MTMAIpcUtility.onWithTenantScope(t,d.RejectCallActionEvent,function(t,i){return e.onRejectCallActionEvent(i)}),teamspace.services.MTMAIpcUtility.onWithTenantScope(t,d.EndCallActionEvent,function(t,i){return e.onEndCallActionEvent(i)}),teamspace.services.MTMAIpcUtility.onWithTenantScope(t,d.HoldCallActionEvent,function(t,i){return e.onHoldCallActionEvent(i)}),teamspace.services.MTMAIpcUtility.onWithTenantScope(t,d.MuteCallActionEvent,function(t,i){return e.onMuteCallActionEvent(i)}),teamspace.services.MTMAIpcUtility.onWithTenantScope(t,d.MergeCallsActionEvent,function(t){for(var i=[],l=1;l<arguments.length;l++)i[l-1]=arguments[l];return e.onMergeCallsActionEvent.apply(e,i)}),teamspace.services.MTMAIpcUtility.onWithTenantScope(t,d.CallKitErrorEvent,function(t,i){return e.onCallKitErrorEvent(i)}),teamspace.services.MTMAIpcUtility.onWithTenantScope(t,d.CallKitSuccessEvent,function(t,i){return e.onCallKitSuccessEvent(i)})},t.prototype.sendIpcEventToMain=function(e,t,i){(this.enableCallCtrlSupportForNonSelectedBTDevice||!this.enableCallCtrlSupportForNonSelectedBTDevice&&this.isSelectedMicHfpBT)&&1===this.getPairedBTDevicesCount()?e===d.completeAction?this.$window.electronSafeIpc.send(e,t,i):this.$window.electronSafeIpc.send(e,t):this.logger.info("Selected mic is not HFP BT device, or we have more than one paired BT device, not sending call activity to call manager")},t.prototype.onDeviceChanged=function(){var e=this.getUserSelectedMicrophone();e?this.selectedMicrophone&&this.selectedMicrophone.label===e.label?this.logger.debug("[onDeviceChanged]:selected mic not changed"):(this.selectedMicrophone=e,this.logger.info("[onDeviceChanged]: selected "+e.label),this.isSelectedMicHfpBTDevice()&&this.logger.info("[onDeviceChanged]: newly selected mic is hands-free BT device")):this.logger.warn("Invalid selected device")},t.prototype.getUserSelectedMicrophone=function(){var e=this.deviceManagerService.getSelectedDevices();if(!e)return this.logger.warn("[getUserSelectedMicrophone]: no selected device in device manager"),null;var t=e.microphone;if(!t)return this.logger.warn("[getUserSelectedMicrophone]: no selected mic in device manager"),null;var i=this.deviceManagerService.getMicrophones();return null===i||void 0===i?void 0:i.find(function(e){return e.id===t})},t.prototype.isDeviceHfpBTWin11=function(){var e=this.deviceManagerService.getSelectedDevices(),t=this.deviceManagerService.getCompositeAudioDevices();if(!e||!t)return this.logger.warn("[isDeviceHfpBTWin11]: no selected device / composite devices in device manager"),!1;var i=t.find(function(t){return t.speakerId===e.speaker}),l=t.find(function(t){return t.microphoneId===e.microphone});return l&&i&&l===i?this.deviceManagerService.getSelectedSpeakerLabel().toLowerCase().contains("bluetooth"):void 0},t.prototype.slimcoreVersionSupportsConnectionType=function(){var e=this.callingAgentsService.getVersions().slimCore;return!(!e||"unknown"===e)&&this.utilityService.compareVersions(e,"2021.16")>=0},t.prototype.isSelectedMicHfpBTDevice=function(){return this.isSelectedMicHfpBT=!1,this.slimcoreVersionSupportsConnectionType()?this.isSelectedMicHfpBT=this.selectedMicrophone&&4===this.selectedMicrophone.connectionType:this.platformDetectService.getOS()===this.constants.os.windows&&this.currentOSVersion>this.cutOffWin10Version?this.isSelectedMicHfpBT=this.isDeviceHfpBTWin11():this.isSelectedMicHfpBT=this.selectedMicrophone&&this.selectedMicrophone.label.contains("Hands-Free"),!!this.isSelectedMicHfpBT&&(this.logger.info(this.selectedMicrophone.label+" is selected and is a BT HandsFree device"),!0)},t.prototype.getHfpBTDeviceFromUserDevices=function(){var e=this.deviceManagerService.getMicrophones(),t=null===e||void 0===e?void 0:e.filter(this.slimcoreVersionSupportsConnectionType()?function(e){return 4===e.connectionType}:function(e){return e.label.contains("Hands-Free")});return t&&t.length?1===t.length?t[0]:(this.logger.error("Found more than one BT devices, we currently dont support multiple devices until callManager sends us deviceID"),null):(this.logger.error("Found no BT devices at the moment"),null)},t.prototype.getFirstActiveCall=function(){return _.find(this.callingService.getAllCalls(!0,!0),function(e){return _.includes(a.ActiveCallStates,e.state)})},t.prototype.pendingCallsPresentInCallRegistry=function(){var e=this.callingService.getAllCalls(!0,!0).filter(function(e){return 7!==e.state});return this.logger.info("Number of calls in queue: "+e.length),0!==e.length},t.prototype.setupCallingEventsListeners=function(){var e=this,t=this.constants.events.calling;this.callingEventSubscriptions=[{event:t.callCreated,handler:function(t,i){return i&&1===i.state&&e.onCallNotified(i)}},{event:t.callConnecting,handler:function(t,i){return e.onCallConnecting(i)}},{event:t.callConnected,handler:function(t,i){return e.onCallConnected(i)}},{event:t.callHeld,handler:function(t,i){return e.onCallHeld(i)}},{event:t.callDisplayed,handler:function(t,i){return i&&10!==i.state&&e.onCallDisplayed(i)}}].map(function(t){var i=t.event,l=t.handler;return e.eventingService.unsafeOnWithTenantScope(i,l)})},t.prototype.tryGetCallerNameFromParticipantsList=function(e){var t=_.find(e.participants,function(t){return t.id===e.callerMri});return t?(this.logger.info("[tryGetCallerFromParticipantsList] caller.displayName is "+(t.displayName||"(blank)")+" from the caller object [incomingCallToast]"),t.displayName):(this.logger.error("[tryGetCallerFromParticipantsList] Unable to find callerMri from participant list. [call][incomingCall][incomingCallToast][callerMri={0}][teamsCallId={1}][callId={2}]",e.callerMri,e.teamsCallId,e.callId),e.participants&&e.participants.length&&e.participants[0]?(t=e.participants[0],this.logger.info("[tryGetCallerFromParticipantsList] Fall back to first participant as the caller. [call][incomingCall][incomingCallToast][callerMri={0}][teamsCallId={1}][callId={2}]",t.id,e.teamsCallId,e.callId)):(t={id:void 0,displayName:void 0},this.logger.error("[tryGetCallerFromParticipantsList] No participant list. [call][incomingCall][incomingCallToast][teamsCallId={1}][callId={2}]",e.teamsCallId,e.callId)),t.displayName)},t.prototype.recipientHasVideoCapability=function(e){return e&&this.callingSupportService.isIpVideoAllowedByCapability(e)},t.prototype.onCallNotified=function(e){var t=this;if(!this.incomingCall)if(this.callingSupportService.blockAVOverIPInMeetings())this.logger.info("[onCallNotified]: HID actions disabled since user is not configured to have AV");else{this.callConnectTime=void 0,this.logger.info("[onCallNotified]: sets incomingCall to: "+this.getCallLogInfo(e)+" and calls startRinging"),this.incomingCall=e,this.callsSubscriptions.set(e.teamsCallId,e.on("callStateChanged",function(){return t.onIncomingCallStateChanged()}));var i=this.tryGetCallerNameFromParticipantsList(e),l={callId:this.incomingCall.callId,conversationMri:"incomingConversationMRI",callerId:this.incomingCall.callerMri,callerName:i,hasVideo:this.incomingCall.isVideoOn,cachedAvatarPath:"",canAnswerWithVideo:this.recipientHasVideoCapability(this.incomingCall),autoAnswer:!1,appInitiatedCall:!0,causeId:"callControlService - onCallNotified"};this.logger.info("[onCallNotified]: Sending IPC event reportIncomingCall to native call-manager for callID "+this.incomingCall.callId),this.sendIpcEventToMain(d.reportIncomingCall,l)}},t.prototype.onCallConnecting=function(e){var t,i=this;if(null===(t=e.setupArgs)||void 0===t||!t.isProbeCall)if(this.callingSupportService.blockAVOverIPInMeetings())this.logger.info("[onCallConnecting]: HID actions disabled since user is not configured to have AV");else if(this.connectingCall)this.logger.info("[onCallConnecting]: we already have a call in connecting state that we're tracking");else{this.callConnectTime=void 0,this.enableFlashSupportInHfpBTDevices&&this.fakeMoHCall&&this.fakeMoHCall!==e&&(this.logger.info("setting fakemoh call "+this.fakeMoHCall.callId+" to null"),this.fakeMoHCall=null),this.logger.info("[onCallConnecting]: sets connectingCall to: "+this.getCallLogInfo(e)+" and starts listening"),this.connectingCall=e;var l=this.sxConfig.getCurrentSkypeMri();this.connectingCall.callerMri===l&&(this.isTeamsMeeting(e)?this.raiseStartCallEvent(this.connectingCall.callId,"TeamsMeeting"):this.peopleService.getPeopleProfile(this.connectingCall.originalCalleeMri,"CallControlService").then(function(e){var t=e&&e.displayName;i.raiseStartCallEvent(i.connectingCall.callId,t)}).catch(function(e){i.logger.error("failed to fetch calleeName [error="+e+"]"),i.raiseStartCallEvent(i.connectingCall.callId,"")})),this.callsSubscriptions.set(e.teamsCallId,e.on("callStateChanged",function(){return i.onConnectingCallStateChanged()})),this.appState.hooked=!1}},t.prototype.raiseStartCallEvent=function(e,t){var i={callId:e,conversationMri:"conversationMri",calleeName:t,causeId:"call Control Service - requestStartCall"};this.logger.info("Sending requestStartCall event called with payload "+JSON.stringify(i)),this.sendIpcEventToMain(d.requestStartCall,i)},t.prototype.isTeamsMeeting=function(e){if(!e)return!1;var t=e.getCallingConversation();return!(null===t||void 0===t?void 0:t.isOneToOne())&&!e.isUnparkCall},t.prototype.onCallConnected=function(e){var t,i=this;if(this.callConnectTime=Date.now(),null===(t=e.setupArgs)||void 0===t||!t.isProbeCall)if(this.callingSupportService.blockAVOverIPInMeetings())this.logger.info("[onCallConnected]: call controls disabled since user is not configured to have AV");else{if(this.enableFlashSupportInHfpBTDevices&&e.isServerHold&&null!==e.callHeldAt)return this.fakeMoHCall=e,this.callsSubscriptions.set(this.fakeMoHCall.teamsCallId,this.fakeMoHCall.on("callStateChanged",function(){return i.onfakeMohCallStateChanged()})),void this.logger.warn("[onCallConnected]: call "+e.callId+" is actually a observing call(MoH), dont sync device as there are no modalities");if(this.callHeldByDeviceFlashDuringMultipleCalls&&this.callHeldByDeviceFlashDuringMultipleCalls===e&&(this.callHeldByDeviceFlashDuringMultipleCalls=null),this.sxConfig.getCurrentSkypeMri()===e.callerMri){var l={callId:e.callId,causeId:"call Control Service - onCallConnected"};this.logger.info("[onCallConnected]: Sending reportOutgoingCallConnected event to native call-manager with payload\n        "+JSON.stringify(l)),this.sendIpcEventToMain(d.reportOutgoingCallConnected,l)}if(this.appState.muted=void 0,this.appState.onLocalHoldWithNoOngoingCalls=!1,this.connectingCall&&this.connectingCall===e&&(this.disposeCallSubscriptions(this.connectingCall),this.connectingCall=null),this.activeCall===e){if(this.enableFlashSupportInHfpBTDevices)if(this.connectedIncomingCall&&this.activeCall!==this.connectedIncomingCall)this.logger.info("not syncing hook state on device as this "+this.activeCall+" is not resumed call"),this.connectedIncomingCall=null;else{var n={callId:e.callId,causeId:"call Control Service - call Resumed"};this.logger.info("Sending reportResumeCall event to native call-manager with payload "+JSON.stringify(n)),this.sendIpcEventToMain(d.reportResumeCall,n)}this.callsSubscriptions.set(this.activeCall.teamsCallId,this.activeCall.changed(function(){return i.onActiveCallChanged()})),this.onActiveCallChanged()}else this.updateActiveCall(e)}},t.prototype.onCallHeld=function(e){if(this.callingSupportService.blockAVOverIPInMeetings())this.logger.info("[onCallHeld]: HID actions disabled since user is not configured to have AV");else if(this.activeCall===e||!this.activeCall&&e){var t={callId:e.callId,causeId:"call Control Service - call held"};this.logger.info("Sending reportHoldCall event to native call-manager with payload\n        "+JSON.stringify(t)),this.sendIpcEventToMain(d.reportHoldCall,t),this.enableFlashSupportInHfpBTDevices&&(4===e.state&&(this.isTheOnlyCallInCallRegistry(e)||this.callHeldByDeviceFlashDuringMultipleCalls&&e!==this.callHeldByDeviceFlashDuringMultipleCalls)?(this.appState.onLocalHoldWithNoOngoingCalls=!0,this.logger.info("[onCallHeld]: call "+e.callId+" is on local hold")):e===this.callHeldByDeviceFlashDuringMultipleCalls&&(this.callHeldByDeviceFlashDuringMultipleCalls=null))}},t.prototype.setDeviceHoldStateAfterCallDisconnectFromHid=function(e){var t=this;this.callingSupportService.blockAVOverIPInMeetings()?this.logger.info("[setDeviceHoldStateAfterCallDisconnectFromHid]: HID actions disabled since user is not configured to have AV"):(this.activeCall===e||!this.activeCall&&e)&&(this.appState.flashFromAppToDeviceInProgress=!0,this.logger.info("[onCallHeld] prior call was disconnected from hid device, so the device needs to be reset first in order for it be activated"),this.$timeout(function(){},this.deviceTimeout),this.logger.info("[onCallHeld]: "+this.getCallLogInfo(e)+" on hold, updating device hold state"),this.isTheOnlyCallInCallRegistry(e)&&4===e.state&&(this.appState.onLocalHoldWithNoOngoingCalls=!0),this.$timeout(function(){t.appState.flashFromAppToDeviceInProgress=!1,t.logger.info("[setDeviceHoldStateAfterCallDisconnectFromHid]: device set to flash state as call "+e.callId+" is on local hold")},this.deviceTimeout))},t.prototype.isTheOnlyCallInCallRegistry=function(e){var t=this.callingService.getAllCalls(!0,!0);return this.logger.info("[isTheOnlyCallInCallRegistry]: Number of calls in queue: "+t.length),0===t.filter(function(t){return t.callId!==e.callId}).length},t.prototype.onCallDisplayed=function(e){this.logger.info("current active call = "+this.activeCall+" ; call displayed = "+e),this.enableFlashSupportInHfpBTDevices&&this.fakeMoHCall&&this.fakeMoHCall===e?this.logger.info("[this.onCallDisplayed]: not updating active call since the displayed call is the temporary call thats put on MoH"):this.activeCall!==e&&this.updateActiveCall(e)},t.prototype.updateActiveCall=function(e){var t=this;e.setupArgs.isProbeCall||(this.activeCall&&(this.logger.info("[updateActiveCall]: former active "+this.getCallLogInfo(this.activeCall)+" is being replaced"),this.disposeCallSubscriptions(this.activeCall),this.activeCall=null),this.logger.info("[updateActiveCall]: sets active call to: "+this.getCallLogInfo(e)+" and calls onActiveCallChanged"),e&&(this.activeCall=e,this.callsSubscriptions.set(this.activeCall.teamsCallId,this.activeCall.changed(function(){return t.onActiveCallChanged()})),this.onActiveCallChanged()))},t.prototype.onActiveCallChanged=function(){if(this.activeCall&&!this.activeCall.setupArgs.isProbeCall&&7===this.activeCall.state){this.logger.info("disconnect received for "+this.activeCall.callId);var e=this.activeCall===this.lastDeviceTriggeredLeaveCall;this.callHeldByDeviceFlashDuringMultipleCalls&&this.callHeldByDeviceFlashDuringMultipleCalls===this.activeCall&&(this.callHeldByDeviceFlashDuringMultipleCalls=null),this.connectedIncomingCall&&this.connectedIncomingCall===this.activeCall&&(this.connectedIncomingCall=null);var t={callId:this.activeCall.callId,reason:2,causeId:"call Control Service - currentCallEnded"};this.logger.info("Sending reportCallEnded event with payload callID: "+JSON.stringify(t)),this.sendIpcEventToMain(d.reportCallEnded,t),this.disposeCallSubscriptions(this.activeCall),this.updateActiveCallAfterDisconnect(e),this.appState.hooked=!0,this.enableFlashSupportInHfpBTDevices&&this.handleDeviceHoldState()}},t.prototype.handleDeviceHoldState=function(){var e=this.callingService.getAllCalls(!0,!0).filter(function(e){return 7!==e.state});this.enableFlashSupportInHfpBTDevices&&e&&e.length>0?this.logger.info("[handleDeviceHoldState] device set to flashing state"):this.pendingCallsPresentInCallRegistry()||(this.logger.info("[handleDeviceHoldState]: there are no calls pending, let us reset holdLED on device"),this.appState.onHold=!1,this.appState.onLocalHoldWithNoOngoingCalls=!1)},t.prototype.onfakeMohCallStateChanged=function(){this.logger.info("onfakeMohCallStateChanged received for "+this.fakeMoHCall.callId+" "+this.fakeMoHCall.state);var e=this.fakeMoHCall&&this.fakeMoHCall.state;e&&_.includes([7],e)&&(this.disposeCallSubscriptions(this.fakeMoHCall),this.enableMultipleHfpBTDeviceCallControls&&!this.pendingCallsPresentInCallRegistry()&&(this.logger.info("[hidDisplayDialpadSupport] onfakeMohCallStateChanged state:End call, displayForCall: Idle, callState:"+e),this.appState.hooked=!0,this.fakeMoHCall=null))},t.prototype.updateActiveCallAfterDisconnect=function(e){var t=this;if(this.enableFlashSupportInHfpBTDevices){var i=this.callingService.getAllCalls(!0,!0).filter(function(e){return 7!==e.state});if(i&&i.length>0){this.logger.info("[updateActiveCallAfterDisconnect][handleDeviceHoldState]: find the previous call from "+i.length+" calls in registry");var l=i.map(function(e){return Date.now()-e.callHeldAt.getTime()}),n=i[_.indexOf(l,_.max(l))];this.fakeMoHCall=8===n.state&&n.isServerHold?n:null}if(this.fakeMoHCall)return this.callsSubscriptions.set(this.fakeMoHCall.teamsCallId,this.fakeMoHCall.on("callStateChanged",function(){return t.onfakeMohCallStateChanged()})),this.logger.info("[updateActiveCallAfterDisconnect]: latest active call  "+this.fakeMoHCall.callId+" after disconnect is MoH call on server hold, syncing device state"),this.activeCall=7===this.activeCall.state?null:this.activeCall,void this.setDeviceHoldStateAfterCallDisconnectFromHid(this.fakeMoHCall)}this.activeCall=this.getFirstActiveCall(),this.activeCall?o.isCallConnected(this.activeCall)?this.onCallConnected(this.activeCall):o.isCallOnHold(this.activeCall)&&(this.logger.info("[updateActiveCallAfterDisconnect]: latest active call "+this.activeCall.callId+" after disconnect is on hold, sync device"),e?this.setDeviceHoldStateAfterCallDisconnectFromHid(this.activeCall):this.onCallHeld(this.activeCall)):this.logger.warn("[updateActiveCallAfterDisconnect]: No active call to update")},t.prototype.onIncomingCallStateChanged=function(){var e=this.incomingCall&&this.incomingCall.state;if(e&&_.includes([2,7],e)){if(2===this.incomingCall.state){this.connectedIncomingCall=this.incomingCall;var t={callId:this.incomingCall.callId,withVideo:this.incomingCall.isVideoOn,causeId:"CallControlService - incoming call accepted"};this.logger.info("[onIncomingCallStateChanged]: Sending reportCallAccepted IPCevent to native call-manager with payload  "+JSON.stringify(t)),this.sendIpcEventToMain(d.reportCallAccepted,t)}if(7===this.incomingCall.state){var i={callId:this.incomingCall.callId,reason:2,causeId:"call Control Service - incomingCallEnded"};this.logger.info("[onIncomingCallStateChanged]: Sending reportCallEnded IPCevent to native call-manager with payload "+JSON.stringify(i)),this.sendIpcEventToMain(d.reportCallEnded,i)}this.logger.info("[onIncomingCallStateChanged]: state "+o.stringifyCallState(this.incomingCall.state)+"; stop ringing and dispose subscriptions"),this.disposeCallSubscriptions(this.incomingCall),this.incomingCall=null}},t.prototype.onConnectingCallStateChanged=function(){var e=this.connectingCall&&this.connectingCall.state;e&&_.includes([7],e)&&(this.disposeCallSubscriptions(this.connectingCall),this.connectingCall=null)},t.prototype.handleIncomingCall=function(e){if(this.incomingCall)switch(e){case 0:this.logger.info("[handleIncomingCall]: accepting incoming call"),this.acceptCall(this.incomingCall,!1,!0);break;case 1:this.logger.info("[handleIncomingCall]: rejecting incoming call"),this.incomingCall.reject();var t=this.callingService.findIncomingCallScenario(this.incomingCall.teamsCallId);t&&t.cancel({reason:this.constants.scenarios.calling.reasons.rejectFromHfpBTDevice});break;default:this.logger.error("[handleIncomingCall]: action type "+e+" is unknown")}else this.logger.info("[handleIncomingCall]: no incomingCall, return")},t.prototype.acceptCall=function(e,t,i){var l=this.callingService.getOrCreateIntent(e,{correlationId:this.utilityService.generateUUID(),outgoingVideo:t,outgoingAudio:i,incomingAudio:!0,showPrejoin:!1,context:teamspace.services.CallTelemetryContext.AcceptCall});l&&this.callingUserActionService.canStartOrJoinCallFromIntentForType(l.type)?this.callingUserActionService.startOrJoinCallFromIntent(l):this.callingUserActionService.acceptCall(e.conversationId,e.messageId,!1,t,e.callId,e.participantId)},t.prototype.handleActiveCall=function(e){var t=this;if(this.activeCall&&!this.activeCall.setupArgs.isProbeCall)switch(e){case 2:if(this.appState.onHold)return void this.logger.warn("[handleActiveCall]: returns; app already in onHold=true state");this.logger.info("[handleActiveCall]: holds the active call"),this.callParkService.toggleHold(this.activeCall,"device-triggered");break;case 3:if(!this.appState.onHold)return void this.logger.warn("[handleActiveCall]: returns; app already in onHold=false state");this.logger.info("[handleActiveCall]: resumes the active call"),this.callParkService.toggleHold(this.activeCall,"device-triggered");break;case 4:this.logger.info("[handleActiveCall]: leaves the active call"),this.$timeout(function(){var e;t.logger.info("[handleActiveCall]: leaving the call");var i=t.settingsService.valueAsBoolean(t.constants.settings.names.enableAddingDeviceLabelToTelemetry)?(e={},e[t.constants.counters.eventNames.deviceLabel]=t.getSelectedMicLabel(),e):{};t.lastDeviceTriggeredLeaveCall=t.activeCall,t.callingService.leaveCall(t.activeCall,"device-triggered",i)},this.deviceTimeout);break;default:this.logger.error("[handleActiveCall]: action type "+e+" is unknown")}},t.prototype.setActiveDevice=function(e){if(e===this.selectedMicrophone)return this.logger.info("[setActiveDevice]: device is already the active device"),!0;this.deviceManagerService.setActiveDevices({microphone:e.id,speaker:e.id})},t.prototype.callJustConnected=function(){var e=Date.now()-this.callConnectTime,t=this.settingsService.valueFor(this.constants.settings.names.hidEarlyCallLeaveThreshold);return this.logger.info("[onDidHook] Call connected at "+this.callConnectTime+". Time in call is "+e+"ms. Threshold is "+t+"ms"),e<=t},t.prototype.onStartCallEvent=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.logger.info("[CallControlService]: We currently do not support call start from devices")},t.prototype.getPairedBTDevicesCount=function(){var e=this.deviceManagerService.getMicrophones(),t=null===e||void 0===e?void 0:e.filter(this.slimcoreVersionSupportsConnectionType()?function(e){return 4===e.connectionType}:function(e){return e.label.contains("Hands-Free")});return t&&t.length?t.length:(this.logger.error("Found no BT devices at the moment"),0)},t.prototype.onAnswerCallActionEvent=function(e,t){var i=this,l=this.loggingService.newScenario(this.constants.scenarios.calling.callControls.answerCall),n=this.loggingService.newScenario(this.constants.scenarios.calling.callControls.updateDeviceInCall);if(this.isSelectedMicHfpBTDevice()&&this.getPairedBTDevicesCount()>1)this.logger.warn("[onAnswerCallActionEvent]: we currently have more than one paired BT devices at the moment; HFP call controls will not be available");else if(!this.enableCallCtrlSupportForNonSelectedBTDevice||this.isSelectedMicHfpBTDevice()){if(this.incomingCall&&e===this.incomingCall.callId){if(2!==this.incomingCall.state){var a=this.callingService.getAllCalls(!0,!0);if(a){var o=this.sxConfig.getCurrentSkypeMri(),c=a.filter(function(e){return e.callId!==i.incomingCall.callId&&e.callerMri===o&&2===e.state});if(a.length>1&&c&&c.length>0)return l.fail({errorCMD:"Failed to answer incoming call as there is another outgoing call in progress"}),void this.logger.info("[onAnswerCallActionEvent]: Ignoring incoming call "+this.incomingCall.callId+" and offhooking device for outgoing call outgoingCall? "+c[0].callId+" :none")}}return this.logger.info("[onAnswerCallActionEvent]: accepts incoming call"),this.handleIncomingCall(0),l.stop(),this.logger.info("Sending completeAction for onAnswerCallActionEvent "+t.actionId),void this.sendIpcEventToMain(d.completeAction,t.actionId)}l.fail({errorCMD:"requested callID doesnt match with callID of incoming call"})}else{this.logger.info("Received (hook) event from BT device, attempting to make it the active one in call");var s=this.getHfpBTDeviceFromUserDevices();s?(this.setActiveDevice(s),n.stop()):n.fail({errorCMD:"cannot set bluetooth device active in call"})}},t.prototype.onRejectCallActionEvent=function(e){var t=this.loggingService.newScenario(this.constants.scenarios.calling.callControls.rejectCall);if(!this.isSelectedMicHfpBT){var i="Reject call request not being processed since current selected device "+this.selectedMicrophone.label+" is different";return this.logger.error(i),void t.fail({errorCMD:i})}if(this.isSelectedMicHfpBTDevice()&&this.getPairedBTDevicesCount()>1)this.logger.info("[onRejectCallActionEvent]: we currently have more than one paired BT devices at the moment; HFP call controls will not be available");else{if(this.incomingCall||t.fail({errorCMD:"There is no incoming call to reject"}),e.callId===this.incomingCall.callId)return this.logger.info("[onRejectCallActionEvent]: rejects incoming call"),this.handleIncomingCall(1),t.stop(),this.logger.info("Sending completeAction for onRejectCallActionEvent "+e.actionId),void this.sendIpcEventToMain(d.completeAction,e.actionId);t.fail({errorCMD:"requested callID doesnt match with callID of incoming call"})}},t.prototype.onEndCallActionEvent=function(e){var t=this.loggingService.newScenario(this.constants.scenarios.calling.callControls.endCall);if(!this.isSelectedMicHfpBT){n="End call request not being processed since current selected device "+this.selectedMicrophone.label+" is different";return this.logger.error(n),void t.fail({errorCMD:n})}if(this.isSelectedMicHfpBTDevice()&&this.getPairedBTDevicesCount()>1)this.logger.info("[onEndCallActionEvent]: we currently have more than one paired BT devices at the moment; HFP call controls will not be available");else{var i=!1,l=0;if(this.incomingCall)return this.logger.info("[onRejectCallActionEvent]: rejects incoming call"),this.handleIncomingCall(1),void t.stop();if(this.activeCall){if(e.callId!==this.activeCall.callId)return void t.fail({errorCMD:"requested callID doesnt match with callID of active call"});if(this.settingsService.valueFor(this.constants.settings.names.callControlManagerSettings).disableLeaveCallFromCallManager?(i=!0,l=1):this.settingsService.valueFor(this.constants.settings.names.callControlManagerSettings).disableEarlyLeaveCallFromCallManager&&this.callJustConnected()&&(i=!0,l=2),i){var n="end call request cannot be completed due to "+l;t.incomplete({errorCMD:n}),this.logger.info(n),this.logger.info("Sending completeAction(failure) for onEndCallActionEvent "+e.actionId),this.sendIpcEventToMain(d.completeAction,e.actionId,1)}else this.logger.info("[onEndCallActionEvent]: leaves active call"),this.handleActiveCall(4),this.logger.info("Sending completeAction(success) for onEndCallActionEvent "+e.actionId),this.sendIpcEventToMain(d.completeAction,e.actionId)}}},t.prototype.onHoldCallActionEvent=function(e){var t,i=this.loggingService.newScenario(this.constants.scenarios.calling.callControls.holdCall);if(!this.isSelectedMicHfpBT){var l="Hold call request not being processed since current selected device "+this.selectedMicrophone.label+" is different";return this.logger.error(l),void i.fail({errorCMD:l})}if(this.isSelectedMicHfpBTDevice()&&this.getPairedBTDevicesCount()>1)this.logger.info("[onRejectCallActionEvent]: we currently have more than one paired BT devices at the moment; HFP call controls will not be available");else{if(e.callId===this.activeCall.callId&&e.callId===(null===(t=this.fakeMoHCall)||void 0===t?void 0:t.callId)||i.fail({errorCMD:"requested callID doesnt match with callID of incoming call"}),this.appState.ringing)return this.logger.info("[onHoldCallActionEvent]: Received flash event when there is an incoming call, accept the call"),this.onAnswerCallActionEvent(e.callId),i.stop(),this.logger.info("Sending completeAction for onHoldCallActionEvent "+e.actionId),void this.sendIpcEventToMain(d.completeAction,e.actionId);if(this.appState.hooked){a="[onHoldCallActionEvent]: no ongoing calls or held calls, return";return this.logger.info(a),i.incomplete({errorCMD:a}),this.logger.info("Sending completeAction(failure) for onHoldCallActionEvent "+e.actionId),void this.sendIpcEventToMain(d.completeAction,e.actionId,1)}if(this.appState.flashFromAppToDeviceInProgress){a="[onHoldCallActionEvent]: flash from app to device in progress, return";return this.logger.info(a),i.incomplete({errorCMD:a}),this.logger.info("Sending completeAction(failure) for onHoldCallActionEvent "+e.actionId),void this.sendIpcEventToMain(d.completeAction,e.actionId,1)}var n=this.callingService.getAllCalls(!0,!0);if(this.logger.info("Number of calls in queue: "+n.length),0!==n.length)if(1===n.length){a=void 0;if(this.activeCall&&3===this.activeCall.state)a="[onHoldCallActionEvent]: active call "+this.activeCall.callId+" has been held";else if(this.activeCall&&4===this.activeCall.state)a="[onHoldCallActionEvent]: Local Hold on call "+this.activeCall.callId+" has been removed";else if(this.activeCall&&(5===this.activeCall.state||teamspace.services.CallUtilities.isCallOnServerHold(this.activeCall)))a="[onHoldCallActionEvent]: local hold on call "+this.activeCall.callId+" has been set";else if(this.fakeMoHCall&&this.fakeMoHCall.isServerHold)return a="[onHoldCallActionEvent]: resumed fake Moh call "+this.fakeMoHCall.callId,this.logger.error("[onHoldCallActionEvent] its not expected for the call not to be in observing state at this point"),this.toggleHold(this.fakeMoHCall,i,a),this.logger.info("Sending completeAction(success) for onHoldCallActionEvent "+e.actionId),void this.sendIpcEventToMain(d.completeAction,e.actionId,1);this.toggleHold(this.activeCall,i,a),this.logger.info("Sending completeAction(success) for onHoldCallActionEvent "+e.actionId),this.sendIpcEventToMain(d.completeAction,e.actionId)}else{i.stop();var a=void 0,o=this.loggingService.newScenario(this.constants.scenarios.calling.hid.handleHidFlashEventInMultipleCalls);if(this.activeCall&&3===this.activeCall.state){var c=this.getLastHeldCall();if(this.disableFlashInMultiplePSTNCalls&&this.isPSTNCall(this.activeCall)&&this.isPSTNCall(c))return this.logger.error("[onHoldCallActionEvent]Active call "+this.activeCall.callId+" and lastHeldCall "+c.callId+" are both PSTN, hid flash currently cannot toggle hold between them"),o.stop(),this.logger.info("Sending completeAction(failure) for onHoldCallActionEvent "+e.actionId),void this.sendIpcEventToMain(d.completeAction,e.actionId,1);a="[onHoldCallActionEvent][MultipleCalls]: Retrieved last held call "+c.callId+" and put ongoing call "+this.activeCall.callId+" on hold",this.toggleHold(c,o,a)}else this.activeCall&&4===this.activeCall.state?(a="[onHoldCallActionEvent][MultipleCalls]: Retrieved call "+this.activeCall.callId+" from local hold",this.toggleHold(this.activeCall,o,a)):this.activeCall&&(5===this.activeCall.state||teamspace.services.CallUtilities.isCallOnServerHold(this.activeCall))?(a="[onHoldCallActionEvent][MultipleCalls]: Set local hold on call "+this.activeCall.callId,this.toggleHold(this.activeCall,o,a)):this.fakeMoHCall&&(a="[onHoldCallActionEvent][MultipleCalls]: Resumed current Moh Call "+this.activeCall.callId,this.toggleHold(this.fakeMoHCall,o,a));this.logger.info("Sending completeAction(success) for onAnswerCallActionEvent "+e.actionId),this.sendIpcEventToMain(d.completeAction,e.actionId)}else i.incomplete({error:"No calls to hold"})}},t.prototype.toggleHold=function(e,t,i){var l=this;e?this.callParkService.toggleHold(e,"device-triggered").then(function(){return l.logger.info(i),l.$q.resolve()}).catch(function(i){return l.logger.error("[toggleHold] failed to hold/resume call "+e.callId+" with [error="+i+"]"),t.fail(i),l.$q.reject()}).then(function(){t.stop()}):this.logger.warn("[toggleHold] invalid call object received")},t.prototype.getLastHeldCall=function(){var e=this.callingService.getAllCalls(!0,!0).filter(function(e){return teamspace.services.CallUtilities.isCallOnLocalHold(e)});if(e){this.logger.info("[getLastHeldCall]: we currently have "+e.length+" calls on local hold");var t=e.map(function(e){return Date.now()-e.callHeldAt.getTime()});return e[_.indexOf(t,_.min(t))]}},t.prototype.isPSTNCall=function(e){return SkypeX.Services.ChatServiceUtils.isPstnMri(e.callerMri)||SkypeX.Services.ChatServiceUtils.isPstnMri(e.originalCalleeMri)||e.isServerHold},t.prototype.onMuteCallActionEvent=function(e){this.logger.info("[callControlService]: Mute iis handled through slimcore directly")},t.prototype.onMergeCallsActionEvent=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.logger.info("[callControlService]: Teams desktop client does not support call merge")},t.prototype.onCallKitErrorEvent=function(e){this.logger.error("[callControlService]: Call kit error recieved. callId = "+e.callId+" errorOperation : "+e.operation+" errorMessage: "+e.code)},t.prototype.onCallKitSuccessEvent=function(e){this.logger.info("[callControlService]: call kit success event recieved. errorOperation : "+e.operation+" result: "+e.result)},t.prototype.getSelectedMicLabel=function(){return this.selectedMicrophone&&this.selectedMicrophone.label||"no device, none selected"},t.prototype.getCallLogInfo=function(e){return e&&e.callId?"call with id "+e.callId:"<null>"},t}(teamspace.services.MTMABase);t.CallControlService=g,angular.module("teamspace.callControlService",["pascalprecht.translate","teamspace.callingAlertsService","teamspace.constants","teamspace.callingService","teamspace.callingUserActionService","teamspace.deviceManagerService","teamspace.platformDetectService","teamspace.loggingService","teamspace.peopleService","teamspace.locales","teamspace.settingsService","teamspace.utilityService","teamspace.eventingService","teamspace.callParkService","teamspace.orchestrationService","teamspace.callingSupportService"]).service("callControlService",g)}},[2741]);