webpackJsonp([30],{2733:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i(2734)},2734:function(e,t,i){"use strict";var n=this&&this.__extends||function(){var e=function(t,i){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(t,i)};return function(t,i){function n(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var r=i(2735),s=teamspace.services.MTMAIpcUtility,o=function(e){function t(t,i,n,r,o,a,c,l,u,h){var v,d,p,g,f,m=e.call(this,{enableGattDevices:function(){return u.valueAsBoolean(r.settings.names.enableGattDevices)},hidDeviceDriverConstants:function(){return u.valueFor(r.settings.names.hidDeviceDriverConstants)}},{ipcUtility:{get:function(){return n.electronSafeIpc},on:function(e,t,i){return s.onWithTenantScope(e,t,i)},removeListener:function(e,t,i){return s.removeListener(e,t,i)}},gattDeviceDirectorPresent:!!n.gdd,watchCharacteristic:null===(v=n.gdd)||void 0===v?void 0:v.watchCharacteristic,getConnectedDevices:null===(d=n.gdd)||void 0===d?void 0:d.getConnectedDevices,getDeviceServices:null===(p=n.gdd)||void 0===p?void 0:p.getDeviceServices,getCharacteristicValue:null===(g=n.gdd)||void 0===g?void 0:g.getCharacteristicValue,setCharacteristicValue:null===(f=n.gdd)||void 0===f?void 0:f.setCharacteristicValue},r,c,a,h,o,teams.calling.helpers.toNgPromiseFactory(i),!1)||this;return m.$ocLazyLoad=t,m.$q=i,m.$window=n,m.constants=r,m.aspService=o,m.deviceManagerService=a,m.loggingService=c,m.orchestrationService=l,m.settingsService=u,m.utilityService=h,l.registerForMtma(m),m.initializeOnAppLaunchAndReinit(),m}return n(t,e),t.$inject=["$ocLazyLoad","$q","$window","constants","aspService","deviceManagerService","loggingService","orchestrationService","settingsService","utilityService"],t.prototype.mtmaTelemetryIdentifier=function(){return"GattService"},t}(r.GattBaseService);t.GattService=o,angular.module("teamspace.gattService",["teamspace.constants","teamspace.aspService","teamspace.deviceManagerService","teamspace.loggingService","teamspace.orchestrationService","teamspace.settingsService","teamspace.utilityService"]).service("gattService",o)},2735:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(2736),r=function(){function e(e,t,i,n,r,s,o,a,c){void 0===c&&(c=!0),this.config=e,this.helpers=t,this.constants=i,this.loggingService=n,this.deviceManagerService=r,this.utilityService=s,this.aspService=o,this.promiseFactory=a,this.logger=n.newLogger("gattService"),this.gddConstants={avoidProcessingDeviceSerialNumbers:e.hidDeviceDriverConstants().avoidProcessingDeviceSerialNumbers,enableGattDevices:e.enableGattDevices(),enableTelemetrySupportOnASPDevice:e.hidDeviceDriverConstants().enableTelemetrySupportOnASPDevice,enableTeamsButtonLongPressRaiseHand:e.hidDeviceDriverConstants().enableTeamsButtonLongPressRaiseHand},c&&this.initializeOnAppLaunchAndReinit()}return e.prototype.initializeOnAppLaunchAndReinit=function(e){var t=this;this.logger.info("Initializing GattService, registering device add/remove callbacks"),this.config.enableGattDevices()?this.helpers.gattDeviceDirectorPresent?this.gattDeviceManager||(this.gattDeviceManager=new n.GattDeviceManager(this.constants,this.gddConstants,this.helpers,this.loggingService,this.deviceManagerService,this.utilityService,this.aspService,this.promiseFactory),this.gattDeviceManager.registerGattDeviceConnectedCallback(function(e){return t.deviceAddedToGattDeviceList(e)}),this.gattDeviceManager.registerGattDeviceDisconnectedCallback(function(e){return t.deviceRemovedFromGattDeviceList(e)})):this.logger.error("GATT methods not present on window"):this.logger.info("GATT disabled")},e.prototype.cleanupOnAppTeardown=function(e){var t;null===(t=this.gattDeviceManager)||void 0===t||t.destroy(),this.gattDeviceManager=void 0},e.prototype.init=function(){this.logger.info("Init call from lazy load, initializing GattDeviceManager"),this.gattDeviceManager.init()},e.prototype.deviceAddedToGattDeviceList=function(e){this.logger.info("Registering the following as an ASP GATT device: "+e.logInfo),this.aspService.registerDevice(e,1)},e.prototype.deviceRemovedFromGattDeviceList=function(e){this.logger.info("Unregistering the following as an ASP GATT device: "+e.logInfo),this.aspService.unregisterDevice(e)},e}();t.GattBaseService=r},2736:function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){function r(e){return e instanceof i?e:new i(function(t){t(e)})}return new(i||(i=Promise))(function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){e.done?i(e.value):r(e.value).then(o,a)}c((n=n.apply(e,t||[])).next())})},r=this&&this.__generator||function(e,t){function i(e){return function(t){return n([e,t])}}function n(i){if(r)throw new TypeError("Generator is already executing.");for(;c;)try{if(r=1,s&&(o=2&i[0]?s.return:i[0]?s.throw||((o=s.return)&&o.call(s),0):s.next)&&!(o=o.call(s,i[1])).done)return o;switch(s=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return c.label++,{value:i[1],done:!1};case 5:c.label++,s=i[1],i=[0];continue;case 7:i=c.ops.pop(),c.trys.pop();continue;default:if(o=c.trys,!(o=o.length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){c=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){c.label=i[1];break}if(6===i[0]&&c.label<o[1]){c.label=o[1],o=i;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(i);break}o[2]&&c.ops.pop(),c.trys.pop();continue}i=t.call(e,c)}catch(e){i=[6,e],s=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}var r,s,o,a,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a};Object.defineProperty(t,"__esModule",{value:!0});var s=teamspace.services.MTMASubscriptionUtility,o=i(2737),a=function(){function e(e,t,i,n,r,s,o,a){this.constants=e,this.gddConstants=t,this.serviceHelpers=i,this.loggingService=n,this.deviceManagerService=r,this.utilityService=s,this.aspService=o,this.promiseFactory=a,this.onBleDeviceListChange=_.debounce(this.onBleDeviceListChangeDebounced,1e4),this.logger=n.newLogger("GattDeviceManager"),this.ipc=i.ipcUtility.get(),this.bleDeviceMap=new Map,this.gattDeviceMap=new Map}return e.prototype.init=function(){var e,t=this;null===(e=this.serviceHelpers.ipcUtility)||void 0===e||e.on(this.ipc,this.constants.events.gattDevices.deviceListChange,function(){return t.onBleDeviceListChange()}),this.deviceManagerChangedSubscription=s.subscribe(this.deviceManagerService,function(){return t.devicesChanged(!0)},this.constants.events.calling.devicesChanged)},e.prototype.destroy=function(){var e,t=this;try{null===(e=this.serviceHelpers.ipcUtility)||void 0===e||e.removeListener(this.ipc,this.constants.events.gattDevices.deviceListChange,function(){return t.onBleDeviceListChange()}),this.bleDeviceMap.forEach(function(e){return e.dispose()}),this.gattDeviceMap.forEach(function(e){return e.dispose()}),this.bleDeviceMap.clear(),this.gattDeviceMap.clear(),s.unsubscribe(this.deviceManagerService,this.deviceManagerChangedSubscription),this.deviceManagerChangedSubscription=void 0}catch(e){this.logger.error("Error in disposing GattDeviceManager: "+e)}},e.prototype.registerGattDeviceConnectedCallback=function(e){this.onDeviceAddedToGattDeviceListCallback=e},e.prototype.registerGattDeviceDisconnectedCallback=function(e){this.onDeviceRemovedFromGattDeviceListCallback=e},e.prototype.onBleDeviceListChangeDebounced=function(){return n(this,void 0,void 0,function(){var e,t,i,s,a,c,l,u,h=this;return r(this,function(v){switch(v.label){case 0:return v.trys.push([0,3,,4]),[4,this.serviceHelpers.getConnectedDevices()];case 1:return e=v.sent(),t=e[0].replace('" }, ]','" } ]'),i=this.utilityService.tryParseJSON(t),s=null===i||void 0===i?void 0:i.map(function(e){return{id:e.id,name:e.name}}),a=null===s||void 0===s?void 0:s.filter(function(e){return!h.bleDeviceMap.has(e.id)}),c=Array.from(this.bleDeviceMap.keys()).filter(function(e){return!s.map(function(e){return e.id}).includes(e)}),this.logger.info("[onBleDeviceListChangeDebounced]: Iterating devices"),l=a.map(function(e){return n(h,void 0,void 0,function(){var t,i=this;return r(this,function(n){switch(n.label){case 0:return t=o.GattDeviceDriver.createGattDeviceDriver({bluetoothDeviceId:e.id,name:e.name},this.constants,this.gddConstants,this.serviceHelpers,this.loggingService,this.utilityService,this.promiseFactory),[4,t.initializeDriver().catch(function(e){return i.logger.error("[onBleDeviceListChangeDebounced]: GattDeviceDriver init rejected, error: "+e)})];case 1:return n.sent(),this.bleDeviceMap.set(t.id,t),this.onDeviceAddedToBleDeviceList(t),[2]}})})}),[4,Promise.all(l)];case 2:return v.sent(),c.forEach(function(e){var t=h.bleDeviceMap.get(e);h.bleDeviceMap.delete(e),h.gattDeviceMap.has(e)&&(h.gattDeviceMap.delete(e),h.onDeviceRemovedFromGattDeviceListCallback&&h.onDeviceRemovedFromGattDeviceListCallback(t)),t.dispose()}),[3,4];case 3:return u=v.sent(),this.logger.error("[onBleDeviceListChangeDebounced]: Error "+u),[3,4];case 4:return this.logger.info("[onBleDeviceListChangeDebounced]: Device iteration complete"),this.devicesChanged(!1),[2]}})})},e.prototype.devicesChanged=function(e){var t=this.deviceManagerService.getSelectedDevices(),i=null===t||void 0===t?void 0:t.microphone,n=this.deviceManagerService.getMicrophones();if(this.logger.info("[devicesChanged]: Devices changed, fromSubscription: "+e),null===n||void 0===n?void 0:n.length)if(i){var r=_.find(n,{id:i,connectionType:4});if(r!==this.selectedMicrophone||e)if(_.filter(n,{connectionType:4}).length>1)this.logger.info("[devicesChanged]: Multiple Bluetooth devices returned by DeviceManagerService");else{this.selectedMicrophone=r;var s=this.getMatchingGattDevice(r);if(!s)return this.aspService.unsetActiveDevice(0,1),void this.logger.info("[devicesChanged]: New selected BlueTooth device but GATT device list size invalid: "+this.gattDeviceMap.size+" ");this.selectedGattDevice&&this.aspService.unsetActiveDevice(0,1),this.selectedGattDevice=s,this.selectedGattDevice.selected=!0,this.logger.info("[devicesChanged]: "+this.selectedGattDevice.properties.name),this.aspService.setActiveDevice(this.selectedGattDevice,0)}else this.logger.info("[devicesChanged]: Selected microphone not changed")}else this.logger.info("[devicesChanged]: No currently selected device");else this.logger.info("[devicesChanged]: No microphones return from DeviceManagerService")},e.prototype.getMatchingGattDevice=function(e){var t,i;return 1!==this.gattDeviceMap.size?null:null===(i=null===(t=this.gattDeviceMap.values())||void 0===t?void 0:t.next())||void 0===i?void 0:i.value},e.prototype.onDeviceAddedToBleDeviceList=function(e){e.isAspConnectionOpen()?(this.gattDeviceMap.set(e.id,e),this.onDeviceAddedToGattDeviceListCallback&&this.onDeviceAddedToGattDeviceListCallback(e)):this.logger.info("[onDeviceAddedToBleDeviceList]: ASP connection closed on "+e.logInfo)},e}();t.GattDeviceManager=a},2737:function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){function r(e){return e instanceof i?e:new i(function(t){t(e)})}return new(i||(i=Promise))(function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){e.done?i(e.value):r(e.value).then(o,a)}c((n=n.apply(e,t||[])).next())})},r=this&&this.__generator||function(e,t){function i(e){return function(t){return n([e,t])}}function n(i){if(r)throw new TypeError("Generator is already executing.");for(;c;)try{if(r=1,s&&(o=2&i[0]?s.return:i[0]?s.throw||((o=s.return)&&o.call(s),0):s.next)&&!(o=o.call(s,i[1])).done)return o;switch(s=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return c.label++,{value:i[1],done:!1};case 5:c.label++,s=i[1],i=[0];continue;case 7:i=c.ops.pop(),c.trys.pop();continue;default:if(o=c.trys,!(o=o.length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){c=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){c.label=i[1];break}if(6===i[0]&&c.label<o[1]){c.label=o[1],o=i;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(i);break}o[2]&&c.ops.pop(),c.trys.pop();continue}i=t.call(e,c)}catch(e){i=[6,e],s=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}var r,s,o,a,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a};Object.defineProperty(t,"__esModule",{value:!0});var s=teams.calling.AspMessage,o=teams.calling.AspUtility,a=teamspace.services.CallStateHid,c=teamspace.services.DeviceTelemetryElement,l=teamspace.services.EventId,u=teamspace.services.MessageId,h=teamspace.services.MetadataFlag,v=teamspace.services.ResponseId,d=teamspace.services.Telephony,p=i(2738),g=function(){function e(e,t,i,n,r,s,o){this.properties=e,this.constants=t,this.config=i,this.serviceHelpers=n,this.loggingService=r,this.utilityService=s,this.promiseFactory=o,this.servicesCache=void 0,this.aspConnectionEstablished=!1,this.sendMessageDeferQueue=[],this.mEventMask=0,this.currentEvent=new Array(2),this.deviceTelemetry={endpointCurrentFirmware:null,dongleCurrentFirmware:null,donToAnswer:255,endpointDeviceModelID:null,deviceEndpointSerialNumber:null,baseSerialNumber:null,sideToneLevel:null,audioCodec:255,enabledDSPEffects:0,muteLock:255,headsetWorn:255,batteryLevel:255,deviceReady:255,radioLinkQuality:255,errorMessage:null,buttonPressInfo:null,connectedWirelessDeviceChange:255,peopleCount:null,localConferenceCount:null},this.protocol=1,this.isHidController=!1,this.ipc=n.ipcUtility.get(),this.id=e.bluetoothDeviceId,this.logger=r.newLogger("gattDeviceDriver")}return Object.defineProperty(e.prototype,"logInfo",{get:function(){return'GATT Device "'+this.properties.name+'"'},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){var e,t=this;try{null===(e=this.serviceHelpers.ipcUtility)||void 0===e||e.removeListener(this.ipc,this.constants.events.gattDevices.watchedCharacteristicChanged,function(e,i){return n(t,void 0,void 0,function(){return r(this,function(e){switch(e.label){case 0:return[4,this.watchedCharacteristicChanged.apply(this,i)];case 1:return[2,e.sent()]}})})}),this.sendMessageDeferQueue.forEach(function(e){return e.reject("Device "+t.logInfo+" is being disposed, cancelling pending requests")}),this.sendMessageDeferQueue=[]}catch(e){this.logger.error("Error in disposing GATT device "+this.logInfo+", error: "+e)}},e.prototype.initializeDriver=function(){return n(this,void 0,void 0,function(){return r(this,function(e){switch(e.label){case 0:return this.config.enableGattDevices?[4,this.initASP()]:[3,2];case 1:e.sent(),this.config.enableTelemetrySupportOnASPDevice&&this.isNotificationSupported(l.Telemetry)&&(this.deviceTelemetryMap=o.getDeviceTelemetryMap(this.deviceTelemetry)),e.label=2;case 2:return[2]}})})},e.prototype.isAspReinitializationPossible=function(){return!1},e.prototype.isAspCompatible=function(){return n(this,void 0,void 0,function(){var e,t,i,n;return r(this,function(r){switch(r.label){case 0:if(this.servicesCache)return[2,this.servicesCache.includes(p.AspGattServiceUuid)];r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this.serviceHelpers.getDeviceServices(this.id)];case 2:return e=r.sent(),t=e[0].replace('", ]','"]'),(i=this.utilityService.tryParseJSON(t))&&0!==i.length?(this.servicesCache=i,[2,this.servicesCache.includes(p.AspGattServiceUuid)]):(this.logger.warn("[isAspCompatible]: "+this.logInfo+" could not get service list or no services supported"),[2,!1]);case 3:return n=r.sent(),this.logger.error("[isAspCompatible]: "+this.logInfo+", error: "+n),[2,!1];case 4:return[2]}})})},e.prototype.isAspConnectionOpen=function(){return this.aspConnectionEstablished},e.prototype.isNotificationSupported=function(e){return!!(this.mEventMask&e)},e.prototype.pushNotification=function(e,t,i){return n(this,void 0,void 0,function(){var n,o,a,c,v;return r(this,function(r){switch(r.label){case 0:return(n=!this.isAspConnectionOpen())?[4,!this.isAspCompatible()]:[3,2];case 1:n=r.sent(),r.label=2;case 2:return n?(this.logger.info("[pushNotification]: Device is not ASP compatible, not attempting notification"),[2,!1]):(o=this.loggingService.newScenario(p.GattDeviceOperation[p.GattDeviceOperation.pushNotification]),a=[e],c=new s(u.Event,a,h.None),i&&i.length>0&&(c.mMetadataFlag=h.Custom,c.mMetadata=i),this.logger.info("pushNotification: Sending event for {0}",l[e]),[4,this.sendMessage(c,o)]);case 3:return(v=r.sent())&&this.isValidResponse(v)?(this.currentEvent[0]=e,this.currentEvent[1]=t,this.logger.info("[pushNotification]: Push Notification is successful for "+l[e]),o.stop({additionalData:"EventID : "+l[e]}),[2,!0]):(o.fail({message:"EventID : "+l[e],error:"Push Notification Event Response was not valid for the event "+l[e]}),this.logger.error("[pushNotification]: Event Response was not valid for the event "+l[e]),[2,!1])}})})},e.prototype.pushCallState=function(e,t){return n(this,void 0,void 0,function(){var i,n,o,c;return r(this,function(r){switch(r.label){case 0:return i=[e],n=new s(u.CallState,i),t&&t.length>0&&(n.mMetadataFlag=h.Custom,n.mMetadata=t),[4,!this.isAspCompatible()];case 1:return r.sent()?(this.logger.error("[pushCallState]: ASP is not enabled"),[2,!1]):this.isAspConnectionOpen()?(o=this.loggingService.newScenario(p.GattDeviceOperation[p.GattDeviceOperation.pushCallState]),this.logger.info("[pushCallState]: Sending callstate event for "+a[e]),[4,this.sendMessage(n,o)]):(this.logger.error("[pushCallState]: ASP connection is closed"),[2,!1]);case 2:return(c=r.sent())&&this.isValidResponse(c)?(this.currentEvent[0]=e,this.logger.info("[pushCallState]: Push callstate is successful for "+a[e]),o.stop({additionalData:"EventID : "+a[e]}),[2,!0]):(o.fail({message:"EventID : "+a[e],error:"Push CallState Event response was not valid for the call state "+a[e]}),this.logger.error("[pushCallState]: Event response was not valid for the call state "+a[e]),[2,!1])}})})},e.prototype.pullNotificationContext=function(){return n(this,void 0,void 0,function(){var e,t,i;return r(this,function(n){switch(n.label){case 0:return e=this.loggingService.newScenario(p.GattDeviceOperation[p.GattDeviceOperation.pullNotificationContext]),this.isAspConnectionOpen()?(t=new s(u.Context),[4,this.sendMessage(t,e)]):(e.fail({error:"ASP connection not established"}),this.logger.error("[pullNotificationContext]: "+this.logInfo+" Pull Notification Context, ASP connection not established"),[2,null]);case 1:return(i=n.sent())&&i.hasPayload()?(e.stop(),[2,i]):(this.logger.error("[pullNotificationContext]: $this.logInfo} Context response : "+t+" was not correct"),e.fail({error:"Context response "+t+" was not correct"}),[2,null])}})})},e.prototype.triggerClientToDeviceTelemetryQuery=function(e){return n(this,void 0,void 0,function(){var t,i,o,a,c,l,v,d,g,f=this;return r(this,function(m){switch(m.label){case 0:switch(e){case 0:t=this.loggingService.newScenario(p.GattDeviceOperation[p.GattDeviceOperation.requestCallStartTelemetry]);break;case 3:case 4:t=this.loggingService.newScenario(p.GattDeviceOperation[p.GattDeviceOperation.requestDeviceChangeTelemetry]);break;case 1:t=this.loggingService.newScenario(p.GattDeviceOperation[p.GattDeviceOperation.requestBTDeviceUpdateTelemetry]);break;case 2:t=this.loggingService.newScenario(p.GattDeviceOperation[p.GattDeviceOperation.requestPeriodicDataFromSelectedDeviceTelemetry]);break;case 5:t=this.loggingService.newScenario(p.GattDeviceOperation[p.GattDeviceOperation.deviceTriggeredTelemetry])}return i=[],o=[],a=0,this.deviceTelemetryMap.forEach(function(e,t){e.requiredAtCallOrDeviceInit&&(a++,e.expectsOneByteResponse&&i.push(t))}),c=new s(u.Telemetry,i,h.None),[4,this.sendMessage(c,t)];case 1:return(l=m.sent())&&l.mMessageId===u.Telemetry?(o=l.mPayload.filter(function(e,t){return t%2==0}),v=l.mPayload.filter(function(e,t){return t%2==1}),d=o.length,this.deviceTelemetryMap.forEach(function(e,i){return n(f,void 0,void 0,function(){return r(this,function(n){switch(n.label){case 0:return e.requiredAtCallOrDeviceInit&&!e.expectsOneByteResponse&&d<a?(c=new s(u.Telemetry,[i],h.None),[4,this.sendMessage(c,t)]):[3,2];case 1:(l=n.sent())&&l.mMessageId===u.Telemetry?(o.push(l.mPayload[0]),v[d++]=l.mPayload.slice(1,l.mPayload.length)):this.logger.warn("[triggerClientToDeviceTelemetryQuery]: Skipped processing response for key "+i+" as response is invalid"),n.label=2;case 2:return[2]}})})}),o.length!==v.length?(g="[triggerClientToDeviceTelemetryQuery] Invalid response received from device, elements and values lengths mismatched",this.logger.error(g),t.fail({message:g,error:g}),[2,!1]):(this.updateTelemetryElementValues(o,v),this.onDeviceTelemetryReceived&&this.onDeviceTelemetryReceived(this.properties,this.deviceTelemetry,this.deviceTelemetryMap,e),[2,!0])):(g="[triggerClientToDeviceTelemetryQuery]: Invalid response received from device when queried for call start telemetry.",this.logger.error(g),t.fail({message:g,error:g}),[2,!1])}})})},e.prototype.getCurrentValueOfTelemetryElement=function(e){this.deviceTelemetryMap.forEach(function(t,i){return t.elementName.toLowerCase()===e.toLowerCase()&&null!==t.elementValue?t.elementValue:void 0})},e.prototype.initASP=function(){return n(this,void 0,void 0,function(){var e;return r(this,function(t){switch(t.label){case 0:return this.isAspConnectionOpen()?(this.logger.info("[initASP]: redundant call for "+this.logInfo),[2]):[4,this.isAspCompatible()];case 1:return t.sent()?(e=this,[4,this.setupAspCompatibleDevice()]):[3,3];case 2:e.aspConnectionEstablished=t.sent(),this.logger.info("[initASP]: ASP connection status after setup on "+this.logInfo+" is: "+this.aspConnectionEstablished),t.label=3;case 3:return[2]}})})},e.prototype.setupAspCompatibleDevice=function(){return n(this,void 0,void 0,function(){var e,t,i,n,s,o=this;return r(this,function(r){switch(r.label){case 0:e=this.loggingService.newScenario(p.GattDeviceOperation[p.GattDeviceOperation.aspConnection]),this.serviceHelpers.ipcUtility.on(this.ipc,this.constants.events.gattDevices.watchedCharacteristicChanged,function(e,t){return o.watchedCharacteristicChanged.apply(o,t)}),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this.serviceHelpers.watchCharacteristic(this.id,p.AspGattServiceUuid,p.AspGattMsgCharUuid)];case 2:return r.sent(),[3,4];case 3:return t=r.sent(),e.fail({error:"Initialization failed: Could not watch GATT Msg characteristic: "+t}),this.logger.error("[setupAspCompatibleDevice]: Intialization failed, Could not watch GATT Msg characteristic, error: "+t),[2,!1];case 4:return r.trys.push([4,6,,7]),[4,this.serviceHelpers.watchCharacteristic(this.id,p.AspGattServiceUuid,p.AspGattAttnCharUuid)];case 5:return r.sent(),[3,7];case 6:return i=r.sent(),e.fail({error:"Initialization failed: Could not watch GATT Attn characteristic: "+i}),this.logger.error("[setupAspCompatibleDevice]: Intialization failed, Could not watch GATT Attn characteristic, error "+i),[2,!1];case 7:return[4,this.initializeDevice(e)];case 8:return(n=r.sent())?(s=this,[4,this.enumerateSupportedEvents(e)]):(e.fail({error:"Initialization failed: Version response was not correct"}),this.logger.error("[setupAspCompatibleDevice]: Intialization failed, version response was not correct"),[2,!1]);case 9:return s.mEventMask=r.sent(),this.logger.info("[setupAspCompatibleDevice]: enumeration of supported events on "+this.logInfo+" returned: "+this.mEventMask),0===this.mEventMask?(e.fail({error:"enumerateSupportedEvents failed"}),this.logger.error("[setupAspCompatibleDevice]: This device doesn't support any of the notification events"),[2,!1]):(this.logger.info("[setupAspCompatibleDevice]: Initialization of "+this.logInfo+" was successful"),e.stop(),[2,!0])}})})},e.prototype.initializeDevice=function(e){return n(this,void 0,void 0,function(){var t,i;return r(this,function(n){switch(n.label){case 0:return t=new s(u.Version),[4,this.sendMessage(t,e)];case 1:return(i=n.sent())&&i.mPayload[0]===s.PROTOCOL_VERSION?[2,!0]:(this.logger.error("[initializeDevice]: Version response was not correct"),[2,!1])}})})},e.prototype.sendMessage=function(e,t){return n(this,void 0,void 0,function(){var i,n,s,o=this;return r(this,function(r){return i=e.serialize(),this.logger.info("[sendMessage]: "+this.logInfo+", Sending "+u[e.mMessageId]+" message : "+i),n=Uint8Array.from(i),s=this.promiseFactory.createDeferred(),this.sendMessageDeferQueue.push(s),[2,this.serviceHelpers.setCharacteristicValue(this.id,p.AspGattServiceUuid,p.AspGattMsgCharUuid,n).then(function(i){return s.promise.then(function(i){return o.handleMessageResponse(e,i,t)})}).catch(function(i){var n="[sendMessage]: "+o.logInfo+", MessageID "+u[e.mMessageId]+" could not be written, error: "+i;return o.logger.error(n),t.fail({message:"EventID : "+l[e.mPayload[0]],error:n}),o.sendMessageDeferQueue.pop(),o.promiseFactory.reject(n)})]})})},e.prototype.handleMessageResponse=function(e,t,i){var n=Array.from(t),r=s.parseMessage(n);return this.logger.info("[handleMessageResponse]: "+this.logInfo+", Received Response : "+n),r&&r.mMessageId===e.mMessageId&&r.hasPayload()?r:(this.logger.error("[handleMessageResponse]: "+this.logInfo+", Response was not correct : "+n),i.fail({message:"EventID : "+l[e.mPayload[0]],error:"[handleMessageResponse]: "+u[e.mMessageId]+" Response was not correct"}),null)},e.prototype.watchedCharacteristicChanged=function(e,t,i,s){return n(this,void 0,void 0,function(){var n;return r(this,function(r){switch(r.label){case 0:return e!==this.id||t!==p.AspGattServiceUuid?[2]:i===p.AspGattMsgCharUuid?0===this.sendMessageDeferQueue.length?(this.logger.error("[watchedCharacteristicChanged]: "+this.logInfo+", Msg characteristic notify callback with no pending deferred"),[2]):((n=this.sendMessageDeferQueue.shift()).resolve(s),[2]):i!=p.AspGattAttnCharUuid?[3,2]:[4,this.handleDeviceAttention()];case 1:return r.sent(),[2];case 2:return[2]}})})},e.prototype.handleDeviceAttention=function(){return n(this,void 0,void 0,function(){var e,t,i,n,s,o,a;return r(this,function(r){switch(r.label){case 0:return e=this.loggingService.newScenario(p.GattDeviceOperation[p.GattDeviceOperation.teamsButtonClicked]),[4,this.pullNotificationContext()];case 1:return(t=r.sent())&&t.hasPayload()?(this.logger.info("[handleDeviceAttention]: pull context return event id: {0} ",l[t.mPayload[0]]),this.config.enableTelemetrySupportOnASPDevice&&t.mPayload[0]===l.Telemetry?(i=this.loggingService.newScenario("selectedDeviceTriggered"),t.mMetadataFlag!==h.None&&t.hasMetadata()?(n=[],s=[],o=t.mMetadata[0],this.deviceTelemetryMap.get(o).expectsOneByteResponse?(n=t.mMetadata.filter(function(e,t){return t%2==0}),s=t.mMetadata.filter(function(e,t){return t%2==1})):(n[0]=t.mMetadata[0],s[0]=t.mMetadata.slice(1,t.mMetadata.length)),n.length!==s.length?(a="[handleDeviceAttention]: Invalid response received from device, elements and values lengths mismatched",this.logger.error(a),i.fail({message:a,error:a}),e.stop(),[2]):(this.updateTelemetryElementValues(n,s),this.onDeviceTelemetryReceived&&this.onDeviceTelemetryReceived(this.properties,this.deviceTelemetry,this.deviceTelemetryMap,5),i.stop(),e.stop(),[2])):(a="[handleDeviceAttention]: No telemetry received from GATT device",this.logger.warn(a),e.fail({error:a}),i.fail({message:a,error:a}),[2])):t.mPayload[0]!==l.None&&t.mPayload[0]!==this.currentEvent[0]?(this.logger.error("[handleDeviceAttention]: "+this.logInfo+", There is a mismatch between the context that teams has: "+l[this.currentEvent[0]]+" and device: "+l[t.mPayload[0]],l[this.currentEvent[0]],l[t.mPayload[0]]),e.fail({error:"Mismatch between Teams's context: "+l[this.currentEvent[0]]+" and device: "+l[t.mPayload[0]]}),[2]):(e.stop(),1==t.mMetadata[0]?this.onViewNotificaton&&this.onViewNotificaton(t,this.currentEvent[1]):2==t.mMetadata[0]&&this.config.enableTeamsButtonLongPressRaiseHand&&this.onTeamsButtonLongPress&&this.onTeamsButtonLongPress(),[2])):(this.logger.warn("[handleDeviceAttention]: "+this.logInfo+" No context was returned from the device. No action will be performed."),e.fail({error:"No context was returned from the device"}),[2])}})})},e.prototype.enumerateSupportedEvents=function(e){return n(this,void 0,void 0,function(){var t,i;return r(this,function(n){switch(n.label){case 0:return this.logger.info("[enumerateSupportedEvents]: "+this.logInfo+" Received enumeration of supported events request"),t=new s(u.Feature),[4,this.sendMessage(t,e)];case 1:return(i=n.sent())&&i.hasPayload()?[2,i.mPayload[0]]:(this.logger.error("enumerateSupportedEvents: enumerate events response was incorrect"),e.fail({error:"enumerate events response was incorrect"}),[2,0])}})})},e.prototype.isValidResponse=function(e){return e.hasPayload()&&e.mPayload[0]===v.Accept?e.mMetadataFlag===h.None||!e.hasMetadata()||(this.logger.error("[isValidResponse]: "+u[e.mMessageId]+" message responded with Error code: "+e.mMetadata[0]),!1):(this.logger.error("[isValidResponse]: "+u[e.mMessageId]+"  message declined"),!1)},e.prototype.updateTelemetryElementValues=function(e,t){_.assign(this.deviceTelemetry,{endpointCurrentFirmware:this.getElementValue(c.EndpointCurrentFirmware,e,t,this.deviceTelemetry.endpointCurrentFirmware),dongleCurrentFirmware:this.getElementValue(c.DongleCurrentFirmware,e,t,this.deviceTelemetry.dongleCurrentFirmware),donToAnswer:this.getElementValue(c.DonToAnswer,e,t,this.deviceTelemetry.donToAnswer),endpointDeviceModelID:this.getElementValue(c.EndpointDeviceModelID,e,t,this.deviceTelemetry.endpointDeviceModelID),deviceEndpointSerialNumber:this.getElementValue(c.DeviceEndpointSerialNumber,e,t,this.deviceTelemetry.deviceEndpointSerialNumber),baseSerialNumber:this.getElementValue(c.BaseSerialNumber,e,t,this.deviceTelemetry.baseSerialNumber),sideToneLevel:this.getElementValue(c.SideToneLevel,e,t,this.deviceTelemetry.sideToneLevel),audioCodec:this.getElementValue(c.AudioCodec,e,t,this.deviceTelemetry.audioCodec),enabledDSPEffects:this.getElementValue(c.EnabledDSPEffects,e,t,this.deviceTelemetry.enabledDSPEffects),muteLock:this.getElementValue(c.MuteLock,e,t,this.deviceTelemetry.muteLock),headsetWorn:this.getElementValue(c.HeadsetWorn,e,t,this.deviceTelemetry.headsetWorn),batteryLevel:this.getElementValue(c.BatteryLevel,e,t,this.deviceTelemetry.batteryLevel),deviceReady:this.getElementValue(c.DeviceReady,e,t,this.deviceTelemetry.deviceReady),radioLinkQuality:this.getElementValue(c.RadioLinkQuality,e,t,this.deviceTelemetry.radioLinkQuality),errorMessage:this.getElementValue(c.ErrorMessage,e,t,this.deviceTelemetry.errorMessage),buttonPressInfo:this.getElementValue(c.ButtonPressInfo,e,t,this.deviceTelemetry.buttonPressInfo),connectedWirelessDeviceChange:this.getElementValue(c.ConnectedWirelessDeviceChange,e,t,this.deviceTelemetry.connectedWirelessDeviceChange),peopleCount:this.getElementValue(c.PeopleCount,e,t,this.deviceTelemetry.peopleCount),localConferenceCount:this.getElementValue(c.LocalConferenceCount,e,t,this.deviceTelemetry.localConferenceCount)})},e.prototype.getElementValue=function(e,t,i,n){var r,s=t.indexOf(e);if(!this.config.avoidProcessingDeviceSerialNumbers||e!==c.DeviceEndpointSerialNumber&&e!==c.BaseSerialNumber)if(s>=0){var o=i[s];if(Array.isArray(o))if(e===c.ButtonPressInfo)switch(o[0]){case d.PhoneMute:r=1===o[1]?"mute ON":"mute OFF";break;case d.HookSwitch:r=1===o[1]?"hook ON":"hook OFF"}else r=o.map(function(e){return String.fromCharCode(e)}).join("");else r=o}else this.logger.info("Telemetry response does not have an updated value for element "+c[e]+", returning current value"),r=n;else this.logger.info("value for "+c[e]+" = "+(s>0?i[s]:n)),r=n;if(this.deviceTelemetryMap.has(e)){var a=this.deviceTelemetryMap.get(e);a.elementValue=r,a.lastCreatedOrUpdated=new Date}return r},e.createGattDeviceDriver=function(t,i,n,r,s,o,a){return new e(t,i,n,r,s,o,a)},e}();t.GattDeviceDriver=g},2738:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AspGattServiceUuid="7A460000-AB21-4E76-9327-AEC6021C63FD",t.AspGattMsgCharUuid="7A460001-AB21-4E76-9327-AEC6021C63FD",t.AspGattAttnCharUuid="7A460002-AB21-4E76-9327-AEC6021C63FD";!function(e){e[e.fromApp=0]="fromApp",e[e.onDevice=1]="onDevice",e[e.fromAppToNonSelectedDevice=2]="fromAppToNonSelectedDevice",e[e.onNonSelectedDevice=3]="onNonSelectedDevice"}(t.GattDeviceOperationType||(t.GattDeviceOperationType={}));!function(e){e[e.aspRequest=0]="aspRequest",e[e.aspResponse=1]="aspResponse",e[e.aspConnection=2]="aspConnection",e[e.pushNotification=3]="pushNotification",e[e.pullNotificationContext=4]="pullNotificationContext",e[e.pushCallState=5]="pushCallState",e[e.teamsButtonClicked=6]="teamsButtonClicked",e[e.requestCallStartTelemetry=7]="requestCallStartTelemetry",e[e.requestDeviceChangeTelemetry=8]="requestDeviceChangeTelemetry",e[e.requestBTDeviceUpdateTelemetry=9]="requestBTDeviceUpdateTelemetry",e[e.requestPeriodicDataFromSelectedDeviceTelemetry=10]="requestPeriodicDataFromSelectedDeviceTelemetry",e[e.deviceTriggeredTelemetry=11]="deviceTriggeredTelemetry"}(t.GattDeviceOperation||(t.GattDeviceOperation={}))}},[2733]);